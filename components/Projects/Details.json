[
  {
    "id": 1,
    "title": "Veganism",
    "details": {
      "serviceDescription": "이 프로젝트는 2인이 함께 개발한 졸업 작품으로, 비건 레시피 공유 웹 서비스 비거니즘입니다. \n최근 환경과 건강을 위해 비건식을 선택하는 사람들이 많아졌지만, 이들을 위한 서비스는 여전히 부족하다고 판단하여 제작하게 되었습니다.\n 비거니즘은 비건에 대한 소개, 비건 레시피 공유, 비건 식당 지도, 레시피 추천 기능을 제공합니다. 비건 레시피 데이터는 식품의약품안전처에서 제공하는 오픈 API를 통해 얻은 데이터를 활용했으며, 사용자도 직접 레시피를 작성할 수 있습니다.\nJSP를 사용하여 서버 측에서 동적으로 HTML을 생성하고, 이를 통해 서비스의 디자인과 UI를 구현하였습니다. 또한, JavaScript 기반의 이벤트 처리와 상호작용을 추가하였습니다.",
      "features": [
        "레시피 작성, 후기 작성, 댓글 작성, 찜 하기, 글 임시저장",
        "회원 가입 시 설정한 비건 단계에 따른 레시피 조회 가능 및 음식 카테고리별 레시피 조회 가능",
        "비건 식당 지도 기능은 카카오 지도 API를 활용하여 비건 식당 데이터를 연동, 사용자에게 주변 비건 식당을 쉽게 찾을 수 있는 기능을 제공했습니다.",
        "레시피 추천 기능은 사용자가 작성한 레시피 후기와 찜한 레시피 데이터를 기반으로 선호 레시피를 추천하는 알고리즘을 구현했습니다.(TensorFlow, TensorFlow Recommenders 사용)"
      ],
      "technologies": [
        "Java",
        "JSP",
        "Python",
        "HTML",
        "CSS",
        "JavaScript",
        "Spring",
        "MariaDB",
        "Maven",
        "Git"
      ],
      "contributions": [
        "기획 및 디자인",
        "Spring을 이용하여 글 작성, 댓글 작성, 좋아요 버튼(AJAX 사용)을 포함한 게시판을 구현",
        "레시피 카드 구현",
        "비건 식당 지도 구현",
        "데이터 파싱 및 오픈 API 연결",
        "논문 작성"
      ],
      "images": [
        "/image/6-1.png",
        "/image/6-2.png",
        "/image/6-3.png",
        "/image/6-4.png",
        "/image/6-5.png",
        "/image/6-6.png",
        "/image/6-7.png",
        "/image/6-8.png",
        "/image/6-9.png"
      ]
    }
  },
  {
    "id": 2,
    "title": "교내 총대의원회 투표 시스템",
    "details": {
      "serviceDescription": "이 프로젝트는 풀스택 1인, 백엔드 1인, 프론트엔드 1인이 함께 개발한 서비스입니다.\n 학생회 활동 중 대의원회의에서 투표를 거수로 진행하는 방식을 보고, 이를 개선할 수 있는 서비스가 필요하다고 판단하여 개발을 시작했습니다. IT 동아리 '멋쟁이사자처럼' 팀원들과 진행했으며, 총대의원회 임원들과의 회의를 통해 요구사항을 도출하고 반영했습니다.\n 기획 단계부터 프론트엔드 개발까지 전담하여 진행한 프로젝트입니다.",
      "features": [
        "대의원회의 입장 시 본인 인증이 제대로 이루어지지 않는 문제를 해결하기 위해 학번과 대의원증을 기반으로 회원가입 절차를 도입했습니다.",
        "입구에서 QR코드를 통해 인증된 사용자만 입장할 수 있도록 구현했습니다.",
        "투표 화면은 직관적인 UI를 강조하여 회의 시 투표에만 집중할 수 있도록 설계했습니다.",
        "발표 자료와 함께 사용할 admin용 서비스는 PC 화면에 최적화했으며, 안건을 출력하고 단과대학별로 나뉜 투표 결과를 실시간으로 보여줄 수 있도록 구현했습니다."
      ],
      "technologies": ["React", "CSS"],
      "contributions": [
        "기획",
        "디자인",
        "user용 및 admin용 서비스 프론트엔드 개발"
      ],
      "images": [
        "/image/5-1.png",
        "/image/5-2.png",
        "/image/5-3.png",
        "/image/5-4.png",
        "/image/5-5.png"
      ]
    }
  },
  {
    "id": 3,
    "title": "Rolling",
    "details": {
      "serviceDescription": "'롤링'은 감사, 축하, 응원의 메시지를 온라인으로 전달할 수 있는 웹 롤링페이퍼 서비스입니다. \n디자인 시안은 Figma를 통해, 백엔드 API는 Swagger로 제공받아 프론트엔드 5명이 2주 동안 개발한 리액트 프로젝트입니다.\n 프로젝트 규모가 크지 않아 화면별로 업무를 분배하여 진행했으며, 저는 PM 역할도 함께 수행했습니다.",
      "features": [
        "사용자는 롤링페이퍼를 받을 사람의 페이지를 생성하고, 페이지 내에서 카드를 추가하여 메시지를 작성할 수 있습니다.",
        "메시지 작성 시 프로필 이미지와 폰트를 선택할 수 있으며, 이를 위해 React-Quill 에디터를 활용하였습니다."
      ],
      "technologies": ["React", "JavaScript", "SCSS"],
      "contributions": [
        "PM",
        "롤링페이퍼 메시지 작성 Form 화면(Input, ProfileImage, Dropdown, Editor, CancelBtn, CreateBtn 컴포넌트)",
        "Subheader(뒤로가기 버튼, 카카오톡 공유하기)",
        "반응형 UI",
        "로딩 상태 및 오류 페이지 디자인"
      ],
      "troubleshooting": "프로젝트 초기 설정 단계에서 코드 스타일과 규칙을 명확히 통일하지 않은 점이 작업 중 예상치 못한 문제를 유발했습니다. 코드 포맷팅이 일관되지 않아 불필요한 파일 변경이 발생하고, 코드 리뷰 시 확인해야 할 코드의 양이 늘어나면서 시간이 많이 소요되었습니다. 이를 해결하기 위해 Prettier를 사용하여 자동화된 코드 포맷팅을 적용했습니다. 이로 인해 코드 스타일이 일관되게 유지되었고, 코드 관리가 훨씬 효율적이었습니다. 이 경험을 통해 린팅 도구의 중요성을 배웠으며, 앞으로도 이러한 도구를 적극적으로 활용하여 코드 포맷 문제를 예방하고 작업의 효율성을 높일 계획입니다.\n또한, 프로젝트 진행 중 접근성의 중요성을 인지하고, 개선 작업을 진행했습니다. 마우스 없이도 클릭이 가능하도록 Tab, Enter, SpaceBar 이벤트를 처리하고, 이미지에는 반드시 alt 속성을 추가했습니다. 또한, tab 순서를 사용자 경험을 고려하여 배치하고, tabIndex 속성을 통해 접근성을 높였습니다. 이를 통해 누구나 직관적이고 접근 가능한 서비스를 만드는 것이 중요하다는 것을 다시금 깨달았습니다.",
      "images": [
        "/image/4-1.png",
        "/image/4-2.png",
        "/image/4-3.png",
        "/image/4-4.png"
      ]
    }
  },
  {
    "id": 4,
    "title": "더 줄게",
    "details": {
      "serviceDescription": "'더 줄게'는 시급을 높게 제공하여 급하게 일손이 필요한 아르바이트생을 모집할 수 있는 웹 구인구직 서비스입니다.\n 디자인 시안은 Figma를 통해, 백엔드 API는 Swagger로 제공받아 프론트엔드 4명이 3주 조금 안 되는 기간 동안 개발하였습니다.",
      "features": [
        "아르바이트 계정으로 로그인 시 사용자가 등록한 지역의 공고만 추천하는 맞춤 공고 기능을 제공합니다.",
        "공고를 다양한 조건으로 필터링할 수 있는 기능을 통해 사용자는 원하는 조건에 맞는 공고를 쉽게 찾을 수 있습니다.",
        "최근에 본 공고는 클릭한 공고를 추적하여 사용자가 나중에 다시 확인할 수 있도록 구현되었습니다."
      ],
      "technologies": ["Nextjs", "React", "TypeScript", "Recoil", "SCSS"],
      "contributions": [
        "컴포넌트(페이지네이션, 공고 컴포넌트, 시급 인상 비율 버튼)",
        "화면(공고 리스트(메인), 지역 맞춤 공고, 가게 정보 상세, 가게 정보 등록 · 수정)",
        "공고 Filter, 목록 정렬",
        "지난 공고 및 마감 완료 공고 처리",
        "공고 검색 구현",
        "알림 기능",
        "반응형 UI",
        "로딩 상태 및 오류 페이지 디자인"
      ],
      "troubleshooting": "다른 팀원이 로그인 및 회원가입 기능을 구현한 후, 저는 전역 상태 관리 기능을 추가하여 프로젝트를 개선했습니다. Recoil을 처음 사용하면서 여러 도전에 직면했습니다. 초기에는 atom을 활용하여 정보를 저장하는 데 성공했지만, 페이지 새로 고침 시 데이터가 초기화되는 문제를 경험했습니다. 이 문제를 해결하기 위해 로컬 스토리지와 Recoil을 병행하여 사용하였으며, JWT를 통해 토큰을 디코딩하여 사용자 ID를 저장하고, 이 ID를 기반으로 모든 사용자 데이터를 atom에 저장하는 방식으로 해결했습니다. \n또한, 로그아웃 후에도 사용자 데이터가 남아 있는 문제에 부딪혔습니다. 이를 해결하기 위해, 모든 atom을 리셋할 수 있는 컴포넌트를 상위 루트에 추가하여 로그아웃 시 데이터가 초기화되도록 설정했습니다. \n이러한 경험을 통해 전역 상태 관리의 복잡성을 깊이 이해하게 되었으며, 앞으로 비슷한 상황을 보다 효과적으로 다룰 수 있을 것이라 자신합니다.",
      "images": [
        "/image/3-1.png",
        "/image/3-2.png",
        "/image/3-3.png",
        "/image/3-4.png",
        "/image/3-5.png",
        "/image/3-6.png",
        "/image/3-7.png",
        "/image/3-8.png"
      ]
    }
  },
  {
    "id": 5,
    "title": "GlobalNomad",
    "details": {
      "serviceDescription": "GlobalNomad는 사람들이 여행을 떠날 때, 체험 활동을 쉽게 예약하고 비용을 예측할 수 있도록 돕는 웹 서비스입니다. 바쁜 현대인들의 여행 고민을 줄여주기 위해, 체험 상품을 간편하게 보고 예약할 수 있는 플랫폼을 제공하였습니다. \n이 프로젝트는 백엔드 API를 Swagger로, 기획을 Notion으로, 디자인 시안을 Figma로 받아 프론트엔드 5명이 약 2주 동안 개발하였습니다.",
      "features": [
        "사용자가 체험을 검색하고 정렬할 수 있는 기능을 제공합니다.",
        "사용자는 인기 체험을 쉽게 찾아볼 수 있으며, 직접 체험을 등록할 수도 있습니다.",
        "체험 상세 페이지에서는 예약 가능한 날짜를 선택하고, 지도에서 체험 장소를 확인할 수 있습니다.",
        "체험 후기는 페이지네이션 처리가 되어 있으며 별점을 통해 평가할 수 있습니다.",
        "예약 결과는 알림으로 즉시 전달됩니다.",
        "사용자 편의성을 고려하여 자동 로그인, SNS 공유 기능, 문의 채팅, 다크 모드 테마, 최근 본 공고 관리 등의 다양한 기능이 추가되었습니다.",
        "Recoil을 사용하여 사용자 관리, 정렬 상태, 페이지네이션, 테마, 팝업, 모달 등 전역 상태를 효율적으로 관리하였습니다.",
        "반응형 디자인을 적용하여 모바일과 태블릿에서도 원활한 사용자 경험을 제공합니다."
      ],
      "technologies": [
        "Nextjs",
        "React",
        "TypeScript",
        "Recoil",
        "React-Query",
        "Tailwind CSS"
      ],
      "contributions": [
        "컴포넌트 개발(Modal, Popup, Pagination, Footer 컴포넌트)",
        "체험 상세 페이지(체험 사진 출력, 체험 장소 지도 출력, 후기 및 체험 예약 기능)",
        "예약 현황 페이지(체험 목록 및 예약 현황 캘린더 구현)",
        "후기 작성 기능",
        "다크 모드 테마",
        "반응형 UI",
        "로딩 상태 및 오류 페이지 디자인"
      ],
      "troubleshooting": "체험 예약과 예약 현황 페이지의 캘린더는 프로젝트 초반에 가장 큰 도전 과제였습니다. 이 두 기능을 해결하고자 직접 맡아 작업했습니다. \n체험 예약 캘린더는 처음에 react-datepicker를 사용했으나 스타일 커스터마이징의 어려움으로 react-calendar로 변경했습니다. 이 또한 CSS로만 스타일이 가능해 Tailwind 프로젝트에서 별도의 CSS 파일을 추가하여 디자인을 적용했습니다. 결과적으로 직관적인 날짜 선택 기능을 구현할 수 있었습니다. \n예약 현황 페이지는 fullcalendar 라이브러리를 사용하여 구현했습니다. Tailwind와의 스타일 호환성 문제를 해결하기 위해 styled-components를 활용했습니다. 또한, 각 날짜에 이벤트를 표시하고, 클릭 시 모달을 열어야 하는 복잡한 요구 사항을 처리했습니다. 모달 내부의 신청, 승인, 거절 탭과 관련된 복잡한 로직을 구현하여, 예약 관리와 관련된 모든 요구 사항을 충족시켰습니다. \n이 과정을 통해 복잡한 문제를 해결하는 능력을 키우고, 시안을 분석하여 각 요소의 연결과 처리를 깊이 이해하게 되었습니다.",
      "images": [
        "/image/2-1.png",
        "/image/2-2.png",
        "/image/2-3.png",
        "/image/2-4.png",
        "/image/2-5.png",
        "/image/2-6.png",
        "/image/2-7.png",
        "/image/2-8.png",
        "/image/2-9.png",
        "/image/2-10.png"
      ]
    }
  },
  {
    "id": 6,
    "title": "Portfolio",
    "details": {
      "serviceDescription": "저의 기술과 이력을 정리하여 보여주기 위해 개발한 포트폴리오 사이트입니다. \n포트폴리오 서비스는 저의 작업물과 경험을 직관적이고 개성 있게 보여주기 위해 만들어졌습니다.",
      "features": [
        "페이지 내에서 또 다른 화면이 있는 것처럼 디자인하여 상호작용성과 재미를 더했습니다.",
        "페이지 간 이동은 키보드 방향키와 상단 바의 좌우 버튼으로 가능하며, 이러한 인터랙션을 통해 사이트 탐색의 즐거움을 제공합니다.",
        "상단에는 실제 사이트처럼 디자인된 '내비게이션 바'가 배치되어 있습니다. 이 바에는 뒤로가기, 다음 페이지, 홈 버튼이 포함되어 있어 사용자가 직관적으로 페이지를 탐색할 수 있도록 지원합니다.",
        "주소창은 현재 페이지의 URL로 자동 업데이트되어 페이지의 위치를 명확히 파악할 수 있게 합니다.",
        "햄버거 버튼을 클릭하면 드롭다운 메뉴가 나타나며, 여기에는 GitHub 레포지토리와 기술 블로그 링크가 포함되어 있어 외부 링크로의 빠른 이동이 가능합니다.",
        "이메일 복사 버튼도 추가하여 연락을 편리하게 할 수 있도록 했습니다.",
        "사이트 전체에 애니메이션, hover 효과, tooltip 등을 추가하여 시각적 재미를 더했으며, 스크롤은 디자인에 맞게 커스터마이즈했습니다.",
        "반응형 디자인을 적용하여 모바일과 다양한 화면 크기에서도 원활하게 이용할 수 있도록 하였습니다."
      ],
      "technologies": ["Nextjs", "React", "TypeScript", "Recoil", "SCSS"],
      "contributions": [
        "기획, 디자인, 구현 전반에 걸쳐 모든 작업에 기여했습니다."
      ],
      "troubleshooting": "모바일 화면 구현 시, 실제 기기에서 확인한 결과 예상과 다른 레이아웃이 나타나 어려움을 겪었습니다.\n이를 해결하기 위해 디자인과 스타일을 리팩토링하며 문제를 수정했습니다. 크로스브라우징 테스트의 필요성을 느끼고, 다양한 브라우저의 일관된 사용자 경험을 보장하기 위해 추가적인 테스트와 조정을 진행했습니다. \n이 과정에서 문제를 해결하며 웹 디자인의 세부 사항에 대한 깊은 이해를 얻게 되었습니다.",
      "images": [
        "/image/1-1.png",
        "/image/1-2.png",
        "/image/1-3.png",
        "/image/1-4.png",
        "/image/1-5.png",
        "/image/1-6.png",
        "/image/1-7.png",
        "/image/1-8.png",
        "/image/1-9.png"
      ]
    }
  },
  {
    "id": 7,
    "title": "지뢰찾기 게임",
    "details": {
      "serviceDescription": "웹에서도 지뢰찾기 게임을 할 수 있도록 구현한 서비스입니다. \n기존 서비스(https://freeminesweeper.org)를 참고하여 구현했습니다.",
      "features": [
        "첫 번째 빈칸을 열었을 때 지뢰가 터지지 않도록 구현했습니다.",
        "게임 타이머를 추가하여 성취감을 높였습니다.",
        "오른쪽 마우스 클릭으로 깃발을 표시할 수 있게 하였습니다.",
        "양쪽 마우스 클릭으로 영역을 한 번에 열 수 있게 하였습니다.",
        "Beginner, Intermediate, Expert 난이도를 선택할 수 있게 하였고, 커스텀 난이도 설정 기능도 구현했습니다.",
        "선택한 난이도가 브라우저 새로고침 후에도 유지되도록 저장 기능을 추가했습니다.",
        "useMemo로 보드와 셀의 클래스 이름을 메모이제이션하여 렌더링 성능을 최적화했습니다."
      ],
      "technologies": ["React", "TypeScript", "Redux", "SCSS"],
      "contributions": [
        "기획, 디자인, 구현 전반에 걸쳐 모든 작업에 기여했습니다."
      ],
      "troubleshooting": "오른쪽 클릭으로 깃발을 설정/해제할 때 중복 클릭 이벤트가 발생하는 문제가 발생하였습니다. 문제를 해결하기 위해 preventDefault를 사용해 기본 컨텍스트 메뉴가 열리지 않도록 막고, cell.isRevealed와 gameOver 상태를 체크하여 중복 이벤트 발생을 방지했습니다.\n 이 과정에서 세부적인 이벤트 동작을 제어하는 것이 UX와 코드 안정성에 얼마나 중요한지 느꼈으며, 불필요한 이벤트가 성능에도 영향을 줄 수 있음을 깨달았습니다. 이를 통해 조건부 렌더링과 이벤트 최적화의 필요성을 다시 한번 확인하게 되었습니다.",
      "images": [
        "/image/7-1.png",
        "/image/7-2.png",
        "/image/7-3.png",
        "/image/7-4.png",
        "/image/7-5.png",
        "/image/7-6.png"
      ]
    }
  },
  {
    "id": 8,
    "title": "HelloFit",
    "details": {
      "serviceDescription": "국민체육진흥공단의 공공데이터 활용 공모전에 참여하기 위해 제작했으며, 스포츠 강좌 이용권 사용 트렌드 및 추천을 하기 위한 스포츠 강좌 정보 제공 서비스입니다. \n프론트엔드 2인, 백엔드 1인, 디자이너 1인이 아이디어 도출부터 테스트까지 2024년 11월 한 달 동안 제작하였습니다.",
      "features": [
        "사용자 현재 위치 기반으로 지도에 스포츠 이용권 강좌를 운영하는 시설을 출력합니다.",
        "원하는 스포츠 종목에 필터를 적용하여 해당하는 강좌를 볼 수 있습니다.",
        "누적 신청 인원 수 기반으로 지역별 인기 강좌를 추천합니다.",
        "각 스포츠 시설을 찜하는 기능을 추가하여 찜 목록에서 조회가 가능합니다.",
        "일반 강좌와 장애인용 강좌를 구분하여 사용자 편의성을 높였습니다.",
        "카카오 간편 로그인을 통해 쉽게 이용이 가능합니다.",
        "장애 유형별 필터 제공하여 해당하는 장애 유형에 따른 이용 가능 시설을 확인할 수 있습니다.",
        "PC와 모바일에서 일관된 디자인으로 이용이 가능합니다."
      ],
      "technologies": ["Nextjs", "React", "TypeScript", "Recoil", "SCSS"],
      "contributions": [
        "컴포넌트 개발(Modal, Subheader, GNB, TabNav, tooltip, SearchBar, Notifications 컴포넌트)",
        "일반, 특수 토글로 사용자 상태 전환 및 전역 관리",
        "랜딩 페이지(카카오 로그인 구현, 로그인 상태 Recoil 사용하여 유지)",
        "시설 상세 페이지(시설 위치 지도 출력, 사용자 위치 지도 출력, 후기 작성·수정·삭제)",
        "강좌 목록 페이지(지역 필터, 종목 필터, 특수 필터, 강좌 검색)",
        "인기 강좌 페이지(지역 필터, 종목 필터, 특수 필터, 인기 시설 상위 5개 도출)",
        "찜 목록 페이지(일반/특수 강좌 구분, 찜 PUT/DELETE 로직 구현)",
        "알림 페이지(일반/특수 강좌 구분, 알림 읽음 처리, 개별 알림 삭제, 모든 알림 삭제)",
        "설정 페이지(로그아웃 및 회원 탈퇴 처리)",
        "잘못된 페이지 접근 시 우회 처리"
      ],
      "troubleshooting": "국민체육진흥공단이 제공하는 공공 데이터를 활용해 일반 시설과 특수 시설 서비스를 개발하던 중 데이터 구조의 차이로 문제가 발생했습니다. \n일반 시설은 사업자번호와 SerialNumber가 필요했지만, 특수 시설은 SerialNumber 없이 데이터를 조회할 수 있어, 일반 시설 기준으로 만들어 둔 모든 컴포넌트에서 SerialNumber를 필수로 요구하면서 타입 에러와 상세 정보 보기 경로 충돌 문제가 발생했습니다.\n처음에는 백엔드에 특수 시설 데이터에도 임의의 SerialNumber를 추가 요청했지만, 일반과 특수 이용권을 모두 지원하는 시설일 경우 충돌 가능성이 있어 불가했습니다. 이에 모든 컴포넌트에서 토글 상태(일반/특수)에 따라 데이터를 분기 처리하고, SerialNumber 없이도 동작하도록 타입을 수정했습니다. \nUI는 classNames를 사용해 토글 상태에 따라 다른 스타일을 적용했고, 찜 및 알림 데이터는 API에서 일반/특수 구분 없이 받아오기 때문에 SerialNumber의 유무에 따라 상세 페이지 링크를 동적으로 처리했습니다. 또한, 사용자 편의를 위해 일반과 특수 시설을 아이콘 색상으로 시각적으로 구분했습니다.\n일반/특수 시설 데이터 구조의 차이를 극복하고, 사용자 경험을 고려한 UI와 기능을 완성할 수 있었습니다. 이 과정에서 데이터 구조가 달라도 같은 서비스를 구현하는 복잡한 데이터 처리 로직과 UI 상태 관리의 중요성을 경험하며, 조건부 렌더링과 효율적인 분기 처리 설계 방법을 배웠습니다.",
      "images": [
        "/image/8-1.png",
        "/image/8-2.png",
        "/image/8-3.png",
        "/image/8-4.png",
        "/image/8-5.png",
        "/image/8-6.png",
        "/image/8-7.png",
        "/image/8-8.png",
        "/image/8-9.png"
      ]
    }
  },
  {
    "id": 9,
    "title": "CHESSMONG",
    "details": {
      "serviceDescription": "체스를 하다가 현재 상태에 대한 강의를 찾고 싶을 때, 검색하고 싶은 상태로 말을 두면 맞춤형 유튜브 체스 강의 목록을 확인할 수 있도록 구현된 서비스입니다. \n강의를 등록하는 admin 서비스와 검색하는 user 서비스가 별도 구현되었습니다. WebView 형식의 Android 앱도 개발하였고, 출시 예정입니다. \n프론트엔드 1인, 백엔드 1인 2024년 12월 한 달 동안 제작하였습니다.",
      "features": [
        "admin 서비스는 인증 코드를 입력해야 강의 등록이 가능하도록 구현했습니다.",
        "admin 서비스는 인증 후 유효성 검사를 통과한 유튜브 강의 url로 체스말 코드(FEN) 등록이 가능합니다.",
        "체스말 코드(FEN) 등록 시 사용자 편의성을 위해 키보드 단축 키 기능 추가",
        "유튜브 채널로 필터링이 가능하여 찾는 강의를 수월하게 검색할 수 있습니다.",
        "등록을 원하는 강의는 '업로드 요청' 기능을 통해 유튜브 강의 url을 제출할 수 있습니다.",
        "출시 10일 만에 구글 애널리틱스 기준 활성 사용자 400명을 기록했습니다.",
        "구글 서치 콘솔 및 포털 검색 등록을 완료했습니다."
      ],
      "technologies": [
        "React",
        "React-Native",
        "TypeScript",
        "React-Query",
        "Recoil",
        "SCSS",
        "AWS",
        "Github-Actions"
      ],
      "contributions": [
        "기획, 디자인, 구현 전반에 걸쳐 모든 작업에 기여했습니다.",
        "AWS(CloudFront, S3) 배포 및 Github Actions를 활용한 CI/CD 워크플로우 구축",
        "React-Native와 Expo를 사용해 WebView 앱 개발 (안드로이드 앱 출시 예정)",
        "구글 애널리틱스 등록",
        "구글 서치 콘솔 및 포털 검색 등록"
      ],
      "troubleshooting": "체스몽 프로젝트 개발 과정에서 react-chessground(JavaScript 기반) 라이브러리와 chessground(TypeScript 기반) 라이브러리 간의 호환성 문제를 발견했습니다. 프로젝트는 TypeScript로 작성되었으나, 두 라이브러리의 타입 차이로 인해 정상적인 사용이 어려웠습니다. 이를 해결하기 위해 백엔드 개발자와 협업하여 react-chessground의 타입 정의 파일을 새로 작성하였으며, 작성된 타입 정의를 DefinitelyTyped에 제출하여 PR이 승인되고 머지되었습니다. 이 과정에서 TypeScript를 활용한 라이브러리 확장과 두 라이브러리 간의 호환성 문제를 해결하는 경험을 쌓았으며, 백엔드 개발자와 협업하여 더 정확하고 일관된 타입 정의를 작성할 수 있었습니다. 이를 통해 오픈소스 기여와 협업을 통한 문제 해결 능력을 강화할 수 있었습니다.",
      "images": [
        "/image/9-1.png",
        "/image/9-2.png",
        "/image/9-3.png",
        "/image/9-4.png",
        "/image/9-5.png",
        "/image/9-6.png",
        "/image/9-7.png"
      ]
    }
  }
]
