[
  {
    "id": 6,
    "title": "Veganism",
    "description": "비거니즘은 비건 레시피 공유 웹 서비스로, 사용자가 직접 레시피를 작성하고 공유할 수 있습니다. 비건 식당 지도와 레시피 추천 기능도 제공합니다.",
    "details": {
      "serviceDescription": "이 프로젝트는 2인이 함께 개발한 졸업 작품으로, 비건 레시피 공유 웹 서비스 비거니즘입니다. 최근 환경과 건강을 위해 비건식을 선택하는 사람들이 많아졌지만, 이들을 위한 서비스는 여전히 부족하다고 판단하여 제작하게 되었습니다.\n　 비거니즘은 비건에 대한 소개, 비건 레시피 공유, 비건 식당 지도, 레시피 추천 기능을 제공합니다. 비건 레시피 데이터는 식품의약품안전처에서 제공하는 오픈 API를 통해 얻은 데이터를 활용했으며, 사용자도 직접 레시피를 작성할 수 있습니다.\n　 프론트엔드 전담 프로젝트는 아니었지만, JSP를 사용하여 서버 측에서 동적으로 HTML을 생성하고, 이를 통해 서비스의 디자인과 UI를 구현하였습니다. 또한, JavaScript 기반의 이벤트 처리와 상호작용을 추가하여 포트폴리오에 포함하게 되었습니다.",
      "features": "비건 식당 지도 기능은 카카오 지도 API를 활용하여 비건 식당 데이터를 연동, 사용자에게 주변 비건 식당을 쉽게 찾을 수 있는 기능을 제공했습니다.\n 레시피 추천 기능은 사용자가 작성한 레시피 후기와 찜한 레시피 데이터를 기반으로 선호 레시피를 추천하는 알고리즘을 구현했습니다. 이 과정에서 TensorFlow와 TensorFlow Recommenders를 사용했습니다.",
      "technologies": [
        "Java",
        "JSP",
        "Python",
        "HTML",
        "CSS",
        "JavaScript",
        "Spring",
        "MariaDB",
        "Maven"
      ],
      "contributions": "기획 및 디자인/ Spring을 이용하여 글 작성, 댓글 작성, 좋아요 버튼(AJAX 사용) 등을 포함한 게시판을 구현/ 레시피 카드 구현/ 비건 식당 지도 구현/ 데이터 파싱 및 오픈 API 연결/ 논문 작성",
      "images": [
        "/image/6-1.png",
        "/image/6-2.png",
        "/image/6-3.png",
        "/image/6-4.png",
        "/image/6-5.png",
        "/image/6-6.png",
        "/image/6-7.png",
        "/image/6-8.png",
        "/image/6-9.png"
      ]
    }
  },
  {
    "id": 5,
    "title": "교내 총대의원회 투표 시스템",
    "description": "교내 총대의원회 회의 시 인증 및 투표 과정을 개선하기 위해 개발한 서비스로, 회원가입과 QR 코드 인증을 도입하여 효율적인 투표 진행을 가능하게 합니다.",
    "details": {
      "serviceDescription": "이 프로젝트는 풀스택 1인, 백엔드 1인, 프론트엔드 1인이 함께 개발한 서비스입니다.\n 학생회 활동 중 대의원회의에서 투표를 거수로 진행하는 방식을 보고, 이를 개선할 수 있는 서비스가 필요하다고 판단하여 개발을 시작했습니다. IT 동아리 '멋쟁이사자처럼' 팀원들과 진행했으며, 총대의원회 임원들과의 회의를 통해 요구사항을 도출하고 반영했습니다.\n 기획 단계부터 프론트엔드 개발까지 전담하여 진행한 프로젝트입니다.",
      "features": "대의원회의 입장 시 본인 인증이 제대로 이루어지지 않는 문제를 해결하기 위해 학번과 대의원증을 기반으로 회원가입 절차를 도입하고, 입구에서 QR코드를 통해 인증된 사용자만 입장할 수 있도록 구현했습니다. \n투표 화면은 직관적인 UI를 강조하여 회의 시 투표에만 집중할 수 있도록 설계했습니다. \n발표 자료와 함께 사용할 admin용 서비스는 PC 화면에 최적화했으며, 안건을 출력하고 단과대학별로 나뉜 투표 결과를 실시간으로 보여줄 수 있도록 구현했습니다.",
      "technologies": ["React", "Axios", "Figma"],
      "contributions": "기획/ 디자인/ user용 및 admin용 서비스 프론트엔드 개발",
      "images": [
        "/image/5-1.png",
        "/image/5-2.png",
        "/image/5-3.png",
        "/image/5-4.png",
        "/image/5-5.png"
      ]
    }
  },
  {
    "id": 4,
    "title": "Rolling",
    "description": "감사, 축하, 응원의 메시지를 온라인으로 전달할 수 있는 웹 롤링페이퍼 서비스로, 사용자가 다양한 스타일로 메시지를 작성하고 공유할 수 있습니다.",
    "details": {
      "serviceDescription": "'롤링'은 감사, 축하, 응원의 메시지를 온라인으로 전달할 수 있는 웹 롤링페이퍼 서비스입니다. \n디자인 시안은 Figma를 통해, 백엔드 API는 Swagger로 제공받아 프론트엔드 5명이 2주 동안 개발한 리액트 프로젝트입니다.\n 프로젝트 규모가 크지 않아 화면별로 업무를 분배하여 진행했으며, 저는 PM 역할도 함께 수행했습니다.",
      "features": "사용자는 롤링페이퍼를 받을 사람의 페이지를 생성하고, 페이지 내에서 카드를 추가하여 메시지를 작성할 수 있습니다. \n메시지 작성 시 프로필 이미지와 폰트를 선택할 수 있으며, 이를 위해 React-Quill 에디터를 활용하였습니다.",
      "technologies": ["React", "JavaScript", "SCSS"],
      "contributions": "PM/ 롤링페이퍼 메시지 작성 Form 화면(Input, ProfileImage, Dropdown, Editor, CancelBtn, CreateBtn 컴포넌트)/ Subheader(뒤로가기 버튼, 카카오톡 공유하기)/ 반응형 UI/ 로딩 상태 및 오류 페이지 디자인/ 배포",
      "troubleshooting": "　프로젝트 초기 설정 단계에서 코드 스타일과 규칙을 명확히 통일하지 않은 점이 작업 중간에 예상치 못한 문제를 유발했습니다. \nPrettier의 기본값을 설정했지만, 따옴표 사용 방식이나 코드 포맷팅이 일관되지 않아 불필요한 file change가 발생했고, 코드 리뷰 시 상당한 시간 소요가 있었습니다. 또한, 폴더 구조를 좀 더 세분화했더라면 코드 관리가 훨씬 효율적이었을 것이라는 점을 깨달았습니다. \n\n　코드 리뷰의 중요성도 크게 느꼈습니다. 초기에는 팀원 간 코드 리뷰를 충분히 진행하지 않아 self-merge가 많았고, 그 결과 코드 일관성 유지가 어려웠습니다. PR 메시지 외에도 GitHub의 issue 기능을 적극적으로 활용했더라면 협업 과정에서 문제 해결이 더 원활했을 것이라 생각합니다. PR 메시지도 구체적으로 작성하지 않아서 후속 작업에서 이해가 어려운 경우가 많았기 때문에, 팀원 간의 소통과 협업의 중요성을 배웠습니다. \n\n　프로젝트 진행 중 접근성의 중요성을 인지하고, 그에 따라 개선 작업을 진행했습니다. 마우스 없이도 클릭이 가능하도록 Tab, Enter, SpaceBar 이벤트를 처리하고, 이미지에는 반드시 alt 속성을 추가했습니다. 또한, tab 순서도 사용자 경험을 고려하여 배치하고, tabIndex 속성을 통해 접근성을 더욱 높였습니다. \n　이를 통해 누구나 직관적이고 접근 가능한 서비스를 만드는 것이 중요하다는 것을 다시금 깨달았습니다.",
      "images": [
        "/image/4-1.png",
        "/image/4-2.png",
        "/image/4-3.png",
        "/image/4-4.png"
      ]
    }
  },
  {
    "id": 3,
    "title": "더 줄게",
    "description": "급하게 일손이 필요한 아르바이트생을 구할 수 있는 웹 구인구직 서비스로, 시급을 높게 제공하여 효과적으로 인력을 모집할 수 있습니다.",
    "details": {
      "serviceDescription": "'더 줄게'는 시급을 높게 제공하여 급하게 일손이 필요한 아르바이트생을 모집할 수 있는 웹 구인구직 서비스입니다.\n 디자인 시안은 Figma를 통해, 백엔드 API는 Swagger로 제공받아 프론트엔드 4명이 3주 조금 안 되는 기간 동안 개발하였습니다.",
      "features": "아르바이트 계정으로 로그인 시 사용자가 등록한 지역의 공고만 추천하는 맞춤 공고 기능을 제공합니다.\n공고를 다양한 조건으로 필터링할 수 있는 기능을 통해 사용자는 원하는 조건에 맞는 공고를 쉽게 찾을 수 있습니다.\n최근에 본 공고는 클릭한 공고를 localStorage에 저장하여, 최근 6개 공고만을 출력하여 사용자의 편의를 돕습니다.\n지원한 공고의 결과는 알림으로 표시되어 사용자가 즉시 확인할 수 있습니다.\n사용자 관리는 Recoil을 사용하여 전역 상태를 효과적으로 관리하였습니다.",
      "technologies": [
        "Nextjs",
        "React",
        "TypeScript",
        "Axios",
        "Recoil",
        "SCSS"
      ],
      "contributions": "컴포넌트(페이지네이션, 공고 컴포넌트, 시급 인상 비율 버튼)/ 화면(공고 리스트(메인), 지역 맞춤 공고, 가게 정보 상세, 가게 정보 등록 · 수정)/ 공고 Filter, 목록 정렬/ 지난 공고 및 마감 완료 공고 처리/ 공고 검색 구현/ 알림 기능/ 반응형 UI/ 로딩 상태 및 오류 페이지 디자인/ 배포",
      "troubleshooting": "　전역 상태 관리를 처음 사용해보았는데, Recoil을 도입한 후 많은 어려움을 겪었습니다. 처음에는 atom에 정보를 저장하는 데 성공했지만, 새로고침 시 저장한 정보가 초기화되어 당황했습니다. 이 문제를 해결하기 위해 로컬 스토리지와 Recoil을 병행하여 사용했습니다. JWT로 토큰을 디코딩하여 사용자 ID를 저장하고, 해당 ID로 모든 사용자 데이터를 atom에 저장하는 방식으로 문제를 해결했습니다. \n이후에는 로그아웃 후에도 사용자 데이터가 기억되는 문제에 직면했는데, 이를 해결하기 위해 모든 atom을 리셋하는 컴포넌트를 상위 루트에 추가하여 로그아웃 시 초기화하도록 설정했습니다. \n이러한 경험을 통해 전역 상태 관리의 복잡함을 이해하게 되었고, 앞으로 더 수월하게 다룰 수 있을 것이라 생각합니다.",
      "images": [
        "/image/3-1.png",
        "/image/3-2.png",
        "/image/3-3.png",
        "/image/3-4.png",
        "/image/3-5.png",
        "/image/3-6.png",
        "/image/3-7.png",
        "/image/3-8.png"
      ]
    }
  },
  {
    "id": 2,
    "title": "GlobalNomad",
    "description": "여행 시 체험 활동을 쉽게 예약하고 비용을 예측할 수 있는 서비스로, 여행 준비를 간소화해 줍니다.",
    "details": {
      "serviceDescription": "GlobalNomad는 사람들이 여행을 떠날 때, 체험 활동을 쉽게 예약하고 비용을 예측할 수 있도록 돕는 웹 서비스입니다. 바쁜 현대인들의 여행 고민을 줄여주기 위해, 체험 상품을 간편하게 보고 예약할 수 있는 플랫폼을 제공하였습니다. \n이 프로젝트는 백엔드 API를 Swagger로, 기획을 Notion으로, 디자인 시안을 Figma로 받아 프론트엔드 5명이 약 2주 동안 개발하였습니다.",
      "features": "사용자가 체험을 검색하고 정렬할 수 있는 기능을 제공합니다.\n 사용자는 인기 체험을 쉽게 찾아볼 수 있으며, 직접 체험을 등록할 수도 있습니다. \n체험 상세 페이지에서는 예약 가능한 날짜를 선택하고, 지도에서 체험 장소를 확인할 수 있습니다. \n체험 후기는 페이지네이션 처리가 되어 있으며 별점을 통해 평가할 수 있습니다. \n예약 결과는 알림으로 즉시 전달됩니다. \n사용자 편의성을 고려하여 자동 로그인, SNS 공유 기능, 문의 채팅, 다크 모드 테마, 그리고 최근 본 공고 관리 등의 다양한 기능이 추가되었습니다.\nRecoil을 사용하여 사용자 관리, 정렬 상태, 페이지네이션, 테마, 팝업, 모달 등 전역 상태를 효율적으로 관리하였습니다.\n 반응형 디자인을 적용하여 모바일과 태블릿에서도 원활한 사용자 경험을 제공합니다.",
      "technologies": [
        "Nextjs",
        "React",
        "TypeScript",
        "Recoil",
        "React-Query",
        "Axios",
        "Tailwind CSS"
      ],
      "contributions": "컴포넌트 개발(Modal, Popup, Pagination, Footer 컴포넌트)/ 체험 상세 페이지(체험 사진 출력, 체험 장소 지도 출력, 후기 및 체험 예약 기능)/ 예약 현황 페이지(체험 목록 및 예약 현황 캘린더 구현)/ 후기 작성 기능/ 다크 모드 테마/ 반응형 UI/ 로딩 상태 및 오류 페이지 디자인",
      "troubleshooting": "　체험 예약과 예약 현황 페이지의 캘린더는 프로젝트 초반에 가장 큰 도전 과제였습니다. 이 두 기능을 해결하고자 직접 맡아 작업했습니다. \n　체험 예약 캘린더는 처음에 react-datepicker를 사용했으나 스타일 커스터마이징의 어려움으로 react-calendar로 변경했습니다. 이 또한 CSS로만 스타일이 가능해 Tailwind 프로젝트에서 별도의 CSS 파일을 추가하여 디자인을 적용했습니다. 결과적으로 직관적인 날짜 선택 기능을 구현할 수 있었습니다. \n　예약 현황 페이지는 fullcalendar 라이브러리를 사용하여 구현했습니다. Tailwind와의 스타일 호환성 문제를 해결하기 위해 styled-components를 활용했습니다. 또한, 각 날짜에 이벤트를 표시하고, 클릭 시 모달을 열어야 하는 복잡한 요구 사항을 처리했습니다. 모달 내부의 신청, 승인, 거절 탭과 관련된 복잡한 로직을 구현하여, 예약 관리와 관련된 모든 요구 사항을 충족시켰습니다. \n　이 과정을 통해 복잡한 문제를 해결하는 능력을 키우고, 시안을 분석하여 각 요소의 연결과 처리를 깊이 이해하게 되었습니다.",
      "images": [
        "/image/2-1.png",
        "/image/2-2.png",
        "/image/2-3.png",
        "/image/2-4.png",
        "/image/2-5.png",
        "/image/2-6.png",
        "/image/2-7.png",
        "/image/2-8.png",
        "/image/2-9.png",
        "/image/2-10.png"
      ]
    }
  },
  {
    "id": 1,
    "title": "Portfolio",
    "description": "저의 기술로 저를 소개하기 위해 제작한 포트폴리오 사이트입니다.",
    "details": {
      "serviceDescription": "저의 기술과 이력을 정리하여 보여주기 위해 개발한 포트폴리오 사이트입니다. \n포트폴리오 서비스는 저의 작업물과 경험을 직관적이고 개성 있게 보여주기 위해 만들어졌습니다.",
      "features": "페이지 내에서 또 다른 화면이 있는 것처럼 디자인하여 상호작용성과 재미를 더했습니다. \n페이지 간 이동은 키보드 방향키와 화면 좌우 클릭으로 가능하며, 이러한 인터랙션을 통해 사이트 탐색의 즐거움을 제공합니다. \n상단에는 실제 사이트처럼 디자인된 '내비게이션 바'가 배치되어 있습니다. 이 바에는 뒤로가기, 다음 페이지, 홈 버튼이 포함되어 있어 사용자가 직관적으로 페이지를 탐색할 수 있도록 지원합니다. \n주소창은 현재 페이지의 URL로 자동 업데이트되어 페이지의 위치를 명확히 파악할 수 있게 합니다. \n햄버거 버튼을 클릭하면 드롭다운 메뉴가 나타나며, 여기에는 GitHub 레포지토리와 기술 블로그 링크가 포함되어 있어 외부 링크로의 빠른 이동이 가능합니다. 이메일 복사 버튼도 추가하여 연락을 편리하게 할 수 있도록 했습니다. \n사이트 전체에 애니메이션, hover 효과, tooltip 등을 추가하여 시각적 재미를 더했으며, 스크롤은 디자인에 맞게 커스터마이즈했습니다. \n반응형 디자인을 적용하여 모바일과 다양한 화면 크기에서도 원활하게 이용할 수 있도록 하였습니다.",
      "technologies": ["Nextjs", "React", "TypeScript", "Recoil", "SCSS"],
      "contributions": "기획, 디자인, 구현 전반에 걸쳐 모든 작업에 기여했습니다.",
      "troubleshooting": "　모바일 화면 구현 시, 실제 기기에서 확인한 결과 예상과 다른 레이아웃이 나타나 어려움을 겪었습니다.\n\n　 이를 해결하기 위해 디자인과 스타일을 리팩토링하며 문제를 수정했습니다. 크로스브라우징 테스트의 필요성을 느끼고, 다양한 브라우저와 화면 크기에서의 호환성을 확보하기 위해 추가적인 테스트와 조정을 진행했습니다. 특히, 모바일 기기와 다양한 브라우저에서의 일관된 사용자 경험을 보장하기 위해 CSS 미디어 쿼리와 브라우저별 스타일을 조정하는 작업에 집중했습니다. \n\n　이 과정에서 문제를 해결하며 웹 디자인의 세부 사항에 대한 깊은 이해를 얻게 되었습니다.",
      "images": ["/image/2-1.png", "/image/2-2.png"]
    }
  }
]
